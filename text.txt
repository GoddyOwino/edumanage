PROMOTE
Fetch all students currently enrolled in Grade 1 for the academic year 2023-2024.
Create new Enrollment records for these students in Grade 2 for the academic year 2024-2025.
typescript
Copy code
async function promoteStudents(currentYearId: number, nextYearId: number) {
  const studentsInGrade1 = await prisma.enrollment.findMany({
    where: {
      academicYearId: currentYearId,
      grade: {
        levelName: 'GRADE1'
      }
    },
    include: { student: true }
  });

  for (const enrollment of studentsInGrade1) {
    await prisma.enrollment.create({
      data: {
        studentId: enrollment.studentId,
        gradeId: nextGrade2Id, // Reference to Grade 2
        academicYearId: nextYearId, // Reference to next academic year
      }
    });
  }
}

Example Query to Fetch Students from "Class of 2024 Grade 1":
Here’s an example of how you would query all students who were in Grade 1 during the academic year 2023-2024:

typescript
Copy code
const studentsInGrade1_2024 = await prisma.enrollment.findMany({
  where: {
    academicYear: {
      year: "2023-2024" // Academic year you want to query
    },
    grade: {
      levelName: "GRADE1" // Grade level you want to query
    }
  },
  include: {
    student: true // Include the related student data
  }
});


Where Enrollments Happen
Enrolling a student into a grade for a specific academic year can be done in a few scenarios:

When a student first joins the school (initial enrollment).
When a student is promoted to the next grade at the beginning of a new academic year.

Managing Enrollment Process (Example in Prisma/JavaScript)
Initial Enrollment:
Here’s how you would enroll a student when they first join the school:

typescript
Copy code
const enrollStudent = await prisma.enrollment.create({
  data: {
    student: { connect: { id: studentId } }, // Assuming you already have a studentId
    grade: { connect: { id: gradeId } },     // The grade they are joining
    academicYear: { connect: { id: academicYearId } }, // The current academic year
    enrollmentDate: new Date()  // When the student is enrolled
  }
});
Grade Progression (Promotion):
When the student progresses from Grade 1 to Grade 2 in a new academic year:

typescript
Copy code
const promoteStudent = await prisma.enrollment.create({
  data: {
    student: { connect: { id: studentId } }, // The student's ID
    grade: { connect: { id: newGradeId } },  // The next grade they are moving into
    academicYear: { connect: { id: nextAcademicYearId } }, // The next academic year
    enrollmentDate: new Date()  // Date of the promotion
  }
});
Automating Grade Progression
You can write a script to promote students at the end of each academic year. The script would:

Find all students in a given grade for a specific academic year.
Create new entries in the Enrollment table for the next grade and academic year.
Example:

typescript
Copy code
const studentsInGrade1 = await prisma.enrollment.findMany({
  where: {
    grade: { levelName: "GRADE1" },
    academicYear: { year: "2023-2024" }
  },
  include: {
    student: true
  }
});

for (const enrollment of studentsInGrade1) {
  await prisma.enrollment.create({
    data: {
      student: { connect: { id: enrollment.student.id } },
      grade: { connect: { levelName: "GRADE2" } }, // Move them to Grade 2
      academicYear: { connect: { year: "2024-2025" } }, // New academic year
      enrollmentDate: new Date()
    }
  });
}
Key Benefits of this Approach:
Historical Tracking: Each year’s enrollment is tracked, so you can always query students in any specific academic year and grade.
Automation: You can automate grade promotion to avoid manual updates.
Flexibility: You can handle students who may repeat a grade, transfer to another school, or re-enroll after a gap.
This setup provides an efficient and scalable way to handle student enrollment and grade progression across academic years.



Now, let's address your scenarios:

To see the results of a particular student at a given academic year:

prismaCopyconst studentResults = await prisma.result.findMany({
  where: {
    studentId: "student_id_here",
    academicYearId: academic_year_id_here
  },
  include: {
    subject: true,
    academicYear: true,
    grade: true,
    class: true
  }
})

To see the results of all students in a given grade at a particular year:

prismaCopyconst gradeResults = await prisma.result.findMany({
  where: {
    gradeId: grade_id_here,
    academicYearId: academic_year_id_here
  },
  include: {
    student: true,
    subject: true,
    academicYear: true,
    grade: true,
    class: true
  }
})

To see the results of all students in a particular class at a given year:

prismaCopyconst classResults = await prisma.result.findMany({
  where: {
    classId: class_id_here,
    academicYearId: academic_year_id_here
  },
  include: {
    student: true,
    subject: true,
    academicYear: true,
    grade: true,
    class: true
  }
})










Now, let's outline the processes for handling promotions, repetitions, and graduations:

Promotions:

When promoting students at the end of an academic year:
prismaCopy// Pseudocode for promotion process
async function promoteStudent(studentId, newGradeId, newAcademicYearId) {
  // 1. Update the current enrollment
  await prisma.enrollment.update({
    where: { 
      studentId: studentId,
      academicYearId: currentAcademicYearId,
      status: 'ACTIVE'
    },
    data: { status: 'COMPLETED' }
  })

  // 2. Create a new enrollment for the next grade/year
  await prisma.enrollment.create({
    data: {
      studentId: studentId,
      gradeId: newGradeId,
      academicYearId: newAcademicYearId,
      status: 'ACTIVE'
    }
  })

  // 3. Update the student's current grade
  await prisma.student.update({
    where: { id: studentId },
    data: { currentGradeId: newGradeId }
  })
}

Repetitions:

For students repeating a grade:
prismaCopyasync function repeatGrade(studentId, academicYearId) {
  // 1. Update the current enrollment
  await prisma.enrollment.update({
    where: { 
      studentId: studentId,
      academicYearId: currentAcademicYearId,
      status: 'ACTIVE'
    },
    data: { status: 'REPEATED' }
  })

  // 2. Create a new enrollment for the same grade but new academic year
  const currentGrade = await prisma.student.findUnique({
    where: { id: studentId },
    select: { currentGradeId: true }
  })

  await prisma.enrollment.create({
    data: {
      studentId: studentId,
      gradeId: currentGrade.currentGradeId,
      academicYearId: academicYearId,
      status: 'ACTIVE'
    }
  })
}

Graduations:

When a student completes the final grade:
prismaCopyasync function graduateStudent(studentId) {
  // 1. Update the current enrollment
  await prisma.enrollment.update({
    where: { 
      studentId: studentId,
      status: 'ACTIVE'
    },
    data: { status: 'COMPLETED' }
  })

  // 2. Update the student status
  await prisma.student.update({
    where: { id: studentId },
    data: { 
      status: 'GRADUATED',
      graduationDate: new Date()
    }
  })
}
These functions provide a basic framework for managing student progressions. You would typically call these functions as part of an end-of-year process or when manually updating a student's status.
Some additional considerations:

Implement checks to ensure a student isn't promoted beyond the highest grade or graduated prematurely.
Consider how to handle mid-year transfers or status changes.
You might want to add a field to track the number of times a student has repeated a grade.
For graduations, you might want to create a separate Graduation model to store additional information like ceremony date, honors, etc.
Implement appropriate access controls and validation to ensure these operations are performed by authorized users and with valid data.
Consider creating a StudentHistory model to keep a log of all status changes, which could be useful for generating transcripts or tracking a student's journey through the school system.

This approach provides flexibility in managing various student progression scenarios while maintaining historical data integrity. You can further refine these processes based on your specific school system's rules and requirements.